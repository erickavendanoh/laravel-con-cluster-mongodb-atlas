BASADO EN: https://learn.mongodb.com/courses/getting-started-with-laravel-and-mongodb?_ga=2.66090030.1857813636.1724106116-380764657.1717698978
*Que básicamente es lo mismo que en página "MongoDB and Laravel Integration" ( https://www.mongodb.com/resources/products/compatibilities/mongodb-laravel-integration )

*Para lograr conectar un proyecto de Laravel con un cluster en MongoDB Atlas fue una combinación de esa documentación oficial junto con ayuda de ChatGPT (como colocar las credenciales en el .env)


CONSIDERACIÓN IMPORTANTE: Hay que estar cuidando que la ip del equipo donde se esté trabajando esté en la lista "IP Access List" del cluster, esta se puede ver en apartado "SECURITY"->"Netwrok Access". 
Para agregar la actual: se puede consultar página https://www.whatsmyip.org/ se copia la IP->opción "ADD IP ADDRESS"->se pega ahí la IP, y en "Comment:" se puede colocar algo para identificar esa IP.





-Tener instalado VS Code, PHP (8.2>), Composer
-Tener una BD activa en Atlas MongoDB (en este caso creé una llamada "myappdb")

*Para la BD:
-Se debe tener una cuenta de MongoDB (empleé la que creé cuando se tomaron cursos de MongoDB University)
-En pestaña "Overview", si no se ha creado un cluster, clic en "Create"->opcion "M0"->si sale ventana de "connect" clic en opción "close" por ahora
-En sección "DEPLOYMENT"->"Database"->Clic sobre el cluster creado->Pestaña "Collections"->"Add My Own Data"->Poner datos de BD (nombre, en este caso "myappdb") y el de una colección (en este caso fue "posts")->"Create"





-Abrir una ventana de VS Code, abrir terminal y con "cd" ir llegando a ruta donde se creará proyecto, luego:
" composer create-project laravel/laravel myapp "
*Cambiar en .env en "DB_CONNECTION=" de "sqlite" a "mysql"
" cd myapp "
" php artisan serve "





Para meter MongoDB en laravel:

" php --ini "
*Para ver donde está el archivo de configuración (php.ini), que corresponde a lo de "Loaded Configuration File:" en la salida del comando

-De esta página: https://pecl.php.net/package/mongodb/1.19.3/windows descargar el archivo correspondiente a la versión de PHP que tenga (y si es TS o NTS)
-De carpeta que se descargue, copiar archivo "php_mongodb.dll" y pegarlo dentro de donde estén las extensiones de PHP (en caso de laragon, dentro de ruta C:\laragon\bin\php\php-8.2.19-nts-Win32-vs16-x64\ext)
-En archivo php.ini, con base a documentación ( https://www.php.net/manual/en/mongodb.installation.windows.php ) agregar la línea: " extension=php_mongodb.dll " (yo la coloqué, buscando la palabra "extension", en parte donde estaban líneas como "extension=php_redis.dll", "extension=redis" "extension=fileinfo")
-Detener y volver a iniciar servidor (en laragon si se está empleando)

" composer require mongodb/laravel-mongodb "





Para que se comunique Laravel con la BD en MongoDB:

-Sacar la cadena de conexión (en MongoDB Atlas, sección "DEPLOYMENT"->"Database"->clic sobre el cluster donde está la BD que se empleará->pestaña "Overview"->Opción "Connect"->"Drivers" (en select "Driver" va "PHP" y en "Version" "PHPLIB 1.11 + mondodb-1.10 or later")->Copiar la connection string que viene en parte de abajo). *Reemplazar "<db_password>" con mi contraseña

-En config\database.php: 
En parte " 'default' => env('DB_CONNECTION', 'sqlite'), " cambiar lo de "sqlite" por "mongodb"
y en " 'connections' => [ ]" agregar
"
'mongodb' => [
            'driver' => 'mongodb',
            'dsn' => env('DB_URI', 'mongodb+srv://erickarmando167:clusterick15@cluster0.xomur.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'),
            'database' => 'myappdb',
        ],
"



-En archivo .env:

En la parte de conexión va:
"
DB_CONNECTION=mongodb
DB_HOST=cluster0.xomur.mongodb.net
DB_PORT=27017
DB_DATABASE=myappdb
DB_USERNAME=erickarmando167
DB_PASSWORD=clusterick15
"
*Lo de "cluster0.xomur.mongodb.net" es una parte que también viene en la cadena de conexión

añadir al final
"
DB_URI = "mongodb+srv://erickarmando167:clusterick15@cluster0.xomur.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
"
Es buena práctica mantener la cadena de conexión desacoplada del código con fines de seguridad

Si el proyecto no carga las dependencias automáticamente, agregar en config/app.php:
hasta el final
"
'providers' => ServiceProvider::defaultProviders()->merge([
        // Other Service Providers
        MongoDB\Laravel\MongoDBServiceProvider::class,
        
    ])->toArray(),
"
*El "ServiceProvider" es el que viene de "Illuminate\Support", ósea que se tiene el use "use Illuminate\Support\ServiceProvider;"

HASTA ESTE PUNTO LA CONFIURACIÓN DEL ENTORNO DEV YA ESTÁ HECHA





-Se crea colección "posts" en la BD, desde Atlas.

-Se insert un documento dentro de colección "posts", con la siguiente información:
"
{ 
   "title":"First Blog Post",
   "body" :"Lorem Ipsum, etc.",
   "slug" :"first-blog-post"
}
"
Quedando al final (ya con lo que genera de un principio MongoDB al dar en esa opción):
"
{"_id":{"$oid":"66c4fa87be76415c902727ba"},
   "title":"First Blog Post",
   "body" :"Lorem Ipsum, etc.",
   "slug" :"first-blog-post"
}
"


" php artisan make:model Post -mc "
Este comando crea el modelo Post, su migración y su controlador a la vez, en las carpetas correspondientes


En modelo Post (Post.php) cambiar lo de "use Illuminate\Database\Eloquent\Model;", que artisan coloca ya por defecto, por "use MongoDB\Laravel\Eloquent\Model;"
también se agregan líneas "protected $connection = 'mongodb';", y "// protected $collection = 'blog_posts';" (esta última se comentó después de que se colocó. Cuando se hace una primera inserción en una BD en MongoDB empleando un modelo de Laravel, Laravel en automático crea una colección con el mismo nombre del modelo pero en plural, con esta línea lo que se logra es que cuando se genere la colección sea con el nombre indicado en esa propiedad $collection)


En PostController.php:
"
public function show($slug)
    {
        return view('post', [
            'post' => Post::where('slug', '=', $slug)->first()
        ]);
    }
"
*Se importa modelo Post, agregando: "use App\Models\Post;"



*The MongoDB Eloquent models support all the standard Eloquent query methods, but they also support additional queries that are specific to MongoDB itself. For more details, see https://github.com/mongodb/laravel-mongodb.


-Se agrega la ruta que hará referencia a ese método en web.php:
"
Route::get('/post/{slug}', [PostController::class, 'show']);
"

-Se crea la vista donde se mostrará el post, creando archivo resources/views/post.blade.php, que dentro tendrá:
"
<!DOCTYPE html>
<html>
<head>
   <title>MyBlog</title>
</head>
<body>
   <h1>{{$post->title}}</h1>
   <div>{{$post->body}}</div>
</body>
</html>
"

*Se prueba funcionalidad hasta ahora con: http://localhost:8000/post/first-blog-post





El resto del CRUD (inserción, actualización y eliminación), si bien en la documentación se muestra que se hizo a manera de empleando una API creada en este proyecto de Laravel con sus respectivos Endpoint que corresponderán a cada operación, y los cuales servirán para ejecutar los métodos correspondientes a los que hacen referencia de el controller en cuestión, en este caso PostController.php (todo esto sería lo correspondiente a en archivo routes/api.php, que tuvo que ser creado antes), y todas las operaciones siendo ejecutadas empleando POSTMAN... al quere hacerlo así en POSTMAN marcaba "419 | Page Expired", y no es problema de MongoDB como supuse en un inicio, sino que es en general, ya que al hacer otro proyecto de prueba y con MySQL el error seguía apreciendo en POSTMAN. 
Por lo tanto ya que el uso de POSTMAN no es tan indispensable por ahora sino que lo es más el poder hacer el CRUD como tal en una BD de un cluster en MongoDB Atlas, estas operaciones se harán a manera de vistas y con el Controller, aunque no venga así en la documentación.
ASIMISMO, SE REDEFINIÓ LA ESTRCUTURA DEL PROYECTO EN CUANTO A VISTAS Y RUTAS PARA NO TENER PROBLEMAS CON NOMBRES DE ARCHIVOS Y ASÍ.

**NOTA: Al parecer hay un problema en cómo MongoDB almacena y gestiona las sesiones en Laravel, lo que afecta la validación del token CSRF en solicitudes POST. Ya que incluso en la colección "sessions" (generada automáticamente debido a que en archivo .env "SESSION_DRIVER=file" y en config/session.php "'driver' => env('SESSION_DRIVER', 'database'),") se crea un registro cada vez que se recarga la página.
Para poder hacer solicitudes POST (como envío de formularios con método POST, por ejemplo los usados para hacer inserción de registros):
-En archivo .env: 
cambiar en "SESSION_DRIVER=database" de "database" a "file" 
-En config/session.php:
cambiar en "'driver' => env('SESSION_DRIVER', 'database')," de "database" a "file"
-Ejecutar comandos para limpiar la Caché de Configuración:
"
php artisan config:cache
php artisan config:clear
php artisan cache:clear
"
Con esto, ya no se creará una tabla (colección en el caso de MongoDB) "sessions" donde se van registrando las sesiones en la página (esto es por defecto cuando se crea un proyecto de Laravel), sino que ya se irán guardando a manera de archivos dentro de storage/framework/sessions.

Sin embargo, la opción "file" solo es recomendable en proyectos pequeños, como este, pero para proyectos ya en producción no lo es tanto, ya que si el proyecto está en varios servidores cada uno tendría sus copias, además de que cuando se reinicie o se pierda acceso al sistema de archivos las sesiones podrían perderse. Por otro lado, almacenando esta información en la BD hay más seguridad, además de que es más robusto y escalable.



